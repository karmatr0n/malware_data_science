import os
import tempfile

class PEResource:
  def __init__(self, target_binary):
    self.target_binary = target_binary
    self.tempdir = tempfile.mkdtemp()
    self.icondir = os.path.join(self.tempdir, 'icons')
    self.resourcedir = os.path.join(self.tempdir, 'resources')
    self.images = []

  def extract_images(self):
    for directory in [self.icondir, self.resourcedir]:
      os.mkdir(directory)

    cmds = []
    img_types = { 'bmp': 2, 'ico': 3, 'png': 14 }
    for img_type in img_types.values():
      cmds.append(f'wrestool --type={img_type} -x "{self.target_binary}" -o {self.resourcedir} 2> /dev/null')
    cmds.append(f'icotool -x {self.resourcedir}/*.ico -o {self.icondir} 2> /dev/null')

    for cmd in cmds:
      try:
        os.system(cmd)
      except OSError:
        pass

  def image_hashes(self):
    ext = ['.bmp','.png']
    for dirname in [self.icondir, self.resourcedir]:
      for img in os.listdir(dirname):
        if img.endswith(tuple(ext)):
          imgpath = os.path.join(dirname, img)
          imghash = hash(open(imgpath, encoding = "ISO-8859-1").read())
          self.images.append((imgpath, imghash))

  def cleanup(self):
    os.system(f'rm -rf {self.tempdir}')
